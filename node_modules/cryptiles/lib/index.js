'use strict';

// Load modules

const Crypto = require('crypto');
<<<<<<< HEAD

=======
>>>>>>> 5d7edb5e49e66cd4ec68c0875b595fc9a728b758
const Boom = require('boom');


// Declare internals

const internals = {};


// Generate a cryptographically strong pseudo-random data

exports.randomString = function (size) {

    const buffer = exports.randomBits((size + 1) * 6);
<<<<<<< HEAD
=======
    if (buffer instanceof Error) {
        return buffer;
    }

>>>>>>> 5d7edb5e49e66cd4ec68c0875b595fc9a728b758
    const string = buffer.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
    return string.slice(0, size);
};


// Return a random string of digits

exports.randomDigits = function (size) {

    const buffer = exports.randomBits(size * 8);
<<<<<<< HEAD
=======
    if (buffer instanceof Error) {
        return buffer;
    }

>>>>>>> 5d7edb5e49e66cd4ec68c0875b595fc9a728b758
    const digits = [];
    for (let i = 0; i < buffer.length; ++i) {
        digits.push(Math.floor(buffer[i] / 25.6));
    }

    return digits.join('');
};


// Generate a buffer of random bits

exports.randomBits = function (bits) {

    if (!bits ||
        bits < 0) {

<<<<<<< HEAD
        throw Boom.internal('Invalid random bits count');
=======
        return Boom.internal('Invalid random bits count');
>>>>>>> 5d7edb5e49e66cd4ec68c0875b595fc9a728b758
    }

    const bytes = Math.ceil(bits / 8);
    try {
        return Crypto.randomBytes(bytes);
    }
    catch (err) {
<<<<<<< HEAD
        throw Boom.internal('Failed generating random bits: ' + err.message);
=======
        return Boom.internal('Failed generating random bits: ' + err.message);
>>>>>>> 5d7edb5e49e66cd4ec68c0875b595fc9a728b758
    }
};


<<<<<<< HEAD
exports.fixedTimeComparison = function (a, b) {

    try {
        return Crypto.timingSafeEqual(Buffer.from(a), Buffer.from(b));
    }
    catch (err) {
        return false;
    }
=======
// Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match)

exports.fixedTimeComparison = function (a, b) {

    if (typeof a !== 'string' ||
        typeof b !== 'string') {

        return false;
    }

    let mismatch = (a.length === b.length ? 0 : 1);
    if (mismatch) {
        b = a;
    }

    for (let i = 0; i < a.length; ++i) {
        const ac = a.charCodeAt(i);
        const bc = b.charCodeAt(i);
        mismatch |= (ac ^ bc);
    }

    return (mismatch === 0);
>>>>>>> 5d7edb5e49e66cd4ec68c0875b595fc9a728b758
};
